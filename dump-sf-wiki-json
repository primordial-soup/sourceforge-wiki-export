#!/usr/bin/env perl

use strict;
use warnings;

use v5.16;
use ojo;
use Path::Class;

$SF::BASE_URL = "https://sourceforge.net/rest/";

die "$0 project-name [wiki-base]" unless @ARGV >= 1;
my %args = (
	project => $ARGV[0],
	wiki => $ARGV[1] // 'wiki'
);

my $output_dir = dir( "$args{project}-$args{wiki}" );
$output_dir->mkpath;

my $page_urls = get_project_wiki_page_urls( %args );

for my $page (@$page_urls) {
	my $file = $output_dir->file( $page->{name} );

	my $body = g( $page->{url} )->body; # download
	my $data = j( $body );              # get the JSON out

	# {
	#   related_artifacts => $urls, # Array[Str]
	#   attachments       => [ {
	#                             url => $url, # Str
	#                             bytes => $bytes,  # Int
	#                          }, # ... Array
	#                        ],
	#   title => $title, # Str
	#   text  => $text,  # Str
	# }

	my $text = $data->{text}; # actual article text

	say "Dumping: $page->{name}";
	$file->spew( iomode => '>:encoding(UTF-8)', $text );

	my @attachments = map { Mojo::URL->new($_->{url}) } @{ $data->{attachments} };

	for my $attachment (@attachments) {
		my $a_file = $output_dir->file( $attachment->path->[-1] );
		my $a_data = g($attachment)->body;

		$a_file->spew( iomode => '>:raw', $a_data );
	}

	my $file_related = $output_dir->file( "$page->{name}.related.json" );
	if( @{ $data->{related_artifacts} } ) {
		$file_related->spew( iomode => '>:encoding(UTF-8)',
			j( $data->{related_artifacts} ) );
	}
}

sub get_project_wiki_page_urls {
	my (%args) = @_;
	my $project = $args{project};
	my $wiki_mountpoint = $args{wiki} // 'wiki';

	my $rest_url = Mojo::URL->new();
	my $path =  Mojo::Path->new()->parts([ "p", $project, $wiki_mountpoint, "/" ]);
	$rest_url->path($path);
	$rest_url = $rest_url->base( Mojo::URL->new($SF::BASE_URL) )->to_abs;

	my $pages = j( g($rest_url)->body );

	my $urls = [ map {
			+{
				name => $_,
				url => $rest_url->clone->path( $_ )
			} } @{ $pages->{pages} } ];

	$urls;
}


